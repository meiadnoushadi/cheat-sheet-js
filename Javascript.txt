**********************************************
**********************************************
**********************************************
**********************************************
milad bahrami
**********************************************
**********************************************
**********************************************
**********************************************
----------------------------------------------
----------------------------------------------
comment
----------------------------------------------
----------------------------------------------
html:
<!-- comment -->
------------
css:
/* comment */
------------
javascript:
single line     => // comment
mutiple line    => /* comment */
----------------------------------------------
----------------------------------------------
Display
----------------------------------------------
----------------------------------------------
HTML element,using : innerHTML
HTML output using : document.write()
alert box : window.alert()
console using : console.log()

HTML element,using : innerHTML
document.getElementById('milad').innerHTML = 'getElementById';
HTML output using : document.write()
document.write('document.write');
alert box : window.alret()
window.alert('window.alert');
console using : console.log()
console.log('console.log')
----------------------------------------------
----------------------------------------------
varable & constant in javascript
----------------------------------------------
----------------------------------------------
var nameVariable
    number  not start variable
    _       start variable ok
    %       not found in variable
    #       not start variable
    $       start variable ok
------------
const nameConstant
    can not change value in other line code
----------------------------------------------
----------------------------------------------
Data Type in javascript : string | number | boolean
----------------------------------------------
----------------------------------------------
Method General:

------------
string:
    'string'
    "string"
    \"string\"

    Method:
    variableString.length   length string

    Note:
    in javascript olaviyat data:
        string > number > boolean
        brower : string(numbers in sum) + (string)
                 (string) + string(number1) + string(number2) + ...
------------
number:
    Decimal:
        integer
        float/double
        Ex -> var a = 2;
    bainary:
        Ex -> var a = Ob10101;
    Octal:
        Ex -> var a = Oo23;
    Hex:
        Ex -> var a = Ox3A1F2;

    10powX:
        Ex -> var a = 2e5;

    Method:
    + : sum
    - : sub
    * : mul
    / : div
    olaviyat :
     () > ** > * > + > - > /
    taghadom yeksan:
     left to right
------------
boolean:
    var a = true;
    var b = false;
------------
array:

------------
object:

------------
undefined:
    variable is undefined
    value is undefined
------------
empty:

----------------------------------------------
----------------------------------------------
operator
----------------------------------------------
----------------------------------------------
Arithmetic:
    +  : sum
    -  : sub
    *  : mul
    /  : div
    ** : pow
    %  : mod
    =  : var a = 10
    ++ : ++a => a=11
         a++ => a=10
    -- : --a => a=10

------------
Assignment:
    = : var x = 20;
    +=  : x += 
    -=  : x -=    
    *=  :
    /=  :
    **= :

------------
Comparison:
    >   : lt
    >=  : lte
    <   : gt
    <=  : gte
    ==  : equal value
    === : equal value and type
    !=  : not equal value
    !== : not equal value and type
------------
Logical:
    && : and boolean
    || : or boolean
    !  : NOT boolean

------------
Bitwise:

----------------------------------------------
----------------------------------------------
if | if else | if elseif else | switch
----------------------------------------------
----------------------------------------------
------------
if : 

if (condition){
    amaliyat;
}
------------
if else :

if (condition){
    amaliyat;
}else{
    amaliyat;
}
------------
else if :

if (condition){
    amaliyat;
}else if{
    amaliyat;
}else if{
    amaliyat;
}else{
    amaliyat;
}

------------
switch case :
switch (name variable){
    case value1:
        amaliyat;
        break;
    case value2:
        amaliyat;
        break;
    default:
        amaliyat;
}


----------------------------------------------
----------------------------------------------
while | do-while | for | for in | for of 
----------------------------------------------
----------------------------------------------
------------
while :

while(condition){
    amaliyat;
}
condition => true  : while wroking
condition => false : stop while

------------
do while:

do{
    amaliyat;
}while(condition);

Note:amaliyat run one step age condition ham ghalat bashe

------------
for :

for (startPoint;condition;stepLoop){
    amaliyat;
}

for of:
    [array]
    move in iterable

    for (element of iterable){
        //code
    }

    iterable:
        array
        string
        map
        set


for in:
    {object}
    move in objects
    for(let element in obj){
        // element:key
        // element.key error
        // element['key']
    }

------------
infinite loop:

age loop noghteye payani nadashte bashim
ya shart payan emal nashe 

string and number ==> true
number 0,undefined,NaN,null ==> false

NaN : is result value funtcion no valid

break : stop complete loop
continue : stop gam in loop

------------
nested Loop: 

    for(;;){
        //code
        for(;;){
            //code
        }
        //code
    }


----------------------------------------------
----------------------------------------------
Data Type in javascript : array
----------------------------------------------
----------------------------------------------
define :

    var nameArray=[a,b,c,d,...]


access id:

    nameArray[i] => i : index array


input in array:

    nameArray[i]=data
    Note:age in index nadash ezafe mikone
         va age dasht jayeghozin mikone


length array:

    nameArray.length


equal array:

    barye in kar be address on array dar hafeze
    deghat mishe
    d=[1,2,3,4,'meiad']
    e=[1,2,3,4,'meiad']
    console.log(d==e) => false
-----------
2D array:

    array=[[array],[array]]

    for search array[index][index]...
----------------------------------------------
----------------------------------------------
Data Type in javascript : object
----------------------------------------------
----------------------------------------------
const ObjectName={
    key1:value1,
    key2:value2,
    ...
    key3:function1(),
}
Note:
    sort in brower by alphabet
------------
accesssing property :

    object_name.key
    object_name['key']

------------
use function in object:

    key:function(){}
    key === nameFunction

    access function in object:
    nameObject.key()




-----------
equal array:
    arr1==arr2
        false => address in disk

----------------------------------------------
----------------------------------------------
Data Type in javascript : object
----------------------------------------------
----------------------------------------------
const ObjectName={
    key1:value1,
    key2:value2,
    ...
    key3:function1(),
}
Note:
    sort in brower by alphabet
------------
accesssing property :

    object_name.key
    object_name['key']

------------
use function in object:

    key:function(){}
    key === nameFunction

    access function in object:
    nameObject.key()

------------
spread operator:

    const nameObject={...newName};
    joda kardan entekhabgar ha va sakhte 
    yek data jadid

------------
"this" keyword in method object:

    this mean name object in structure
    const obj={
        key1:value1,
        key2:value2,
        key3:function(){
            return this.key1 
        }
    }

------------
"in" keyword for search in object
    key in object

------------
equal object:
    obj1==obj2
        false => address in disk

----------------------------------------------
----------------------------------------------
Method(funtcion)
----------------------------------------------
----------------------------------------------
two way to used funtcion in project:
    1- funtcion declaration
    2- funtcion expression

-------------
declaration:

    funtcion nameFunction (parameter) {
        //code
        return output
    }

nameFunction(aragument)
-------------
expression:

    var nameFunction=funtcion(parameter){
        //code
        return output
    }

Note:
    age aragument kamtar az parameter bashe
    NaN mishe output 
    age aragument bishtar az parameter bashe
    output dade mishe
    -------------
    parameter anynamus:

        attribute arguments. input funtcion in
        block funtcion:
            aragument.length => tedad aragument

        1-age funtcion meghdare be onvame vorodi
        nadim mishe har tedad vorodi barash ferestad
        arguments: save data in shebhe jazb not array

        2-estefade az rest (... parameter)
        parameter : is array

    -------------
    default parameter:

        funtcion nameFunction(a=0,b=0,c=0){
            //code
        }

        Note: add default parameter use end step
            parameter c=0>b=0>a=0


-------------
Arrow funtcion:

    var nameFunction=(parameter)=>//code

-------------
call back funtcion:

    hamon reversing funtcion
    call funtcion in body other
    funtcion

-------------
scope :

    global scope:
        variable in main body is access

    var nameVariable =>
        main body : access
            global scope
            function scope

    let nameVariable =>
        main body : access
            block scope:
                block : {} : function | if | ...

-------------
string|number|boolean:


type conversion:

    * Number() :
        convert to number
    * String() :
        convert to string
    * Boolean() :
        convert to boolean

    Note:
        space ' ':
            Number(' ')     => convert zero
            Boolean(' ')    => convert true
        in "if" used Boolean method for check
        condition

    Note:
        ever string convert to boolean is true
        "0" => convert boolean => true
        0  => convert boolean => false

    Note:
        baray tarif variable dakhele string
        az `${<nameVariable>}` estefade mishe

------------
Method Array:

    * toString():
        convert array to string
    
    * join(separator):
        convert array to string by separator

    * pop():
        remove end index in array
        return data index in order

    * delete():
        remove index delkhak in array
        Note:
            remove data not index
            darnatije index empty
            mishe

    * push():
        add end index in array
    
    * nameArray.length:
        add end index in array
        nameArray[nameArray.length]=new data

    * shift():
        remove start index in array
        return data index in order

    * shift():
        add start index in array

    * concat():
        nameArray.concat(nameArray2,nameArray3,...)

    * splice(index,num,data,data,...):
        remove after index number in array
        num : set number deleted index
        return data removed
        data : data added in array
               tedad data barabare num hast

    * slice(index1,index2):
        remove after index number in array
        create new array,base array not change
        remove index1 ta ghable index2
    
    * sort():
        sorted array alphabet-sort by string

    * reverse():
        reverse index left => right | right => left

    * indexOf(data):
        return number index avalin
        if not found return -1

    * lastIndexOf(data):
        return number index akharin
        if not found return -1
-------------
Method object:

    add data:
        nameObject.key=value
    
    add function:
        nameObject.key=function(){
            //code
        }

    Note:
        dar zamane eshare shodan be yek 
        data object mohtava dar disk sabet
        hast va ba chand eshare gar mishe
        be on eshare kard
        pas har taghir ba sayer eshare garha
        data asli taghir mikone

-------------
Method Math:

    * random()
        create number 0>= number >1
        Note:
            for create value delkhah bayad
            method random ro zarb dar on baze
            bekonim

    * floor()
        gerd kardan be baze payen



-------------
hoisting :
    1-declare       : noee variable
        hoisting declare !!!
    2- initialize   : meghdar dahi

-------------
active strict mode in code:

    'use strict';
    use force to syntax va mantegh

-------------
define varable:

var :
    save scop


let :
    save scop

    """
    dar har scop meghdare khodesh ro
    hefze mikone
    """
    
const:
    save scop


undeclared :
    total any scop : is global


----------------------------------------------
----------------------------------------------
DOM
----------------------------------------------
----------------------------------------------
DOM : Document Object Model
    1- access elements html doucment
    2-change elements html document
    3- add elements html document
    4- delete elements html doucment
---------------
DOM Tree:

    doucment
        html
            head
                title
                link
                ...
            body
                h1 element
                p element
                ...
                ...

    node: 12 noee 
        * doucment node
        * element node
        * text node
        * comment node

---------------
access element in doucment:

    document.nameElement
        output:
            object
        Note: access html tag 
              doucment.doucmentElement
        Note: access total element
              nameTag[s]

---------------
Document Object:
    method:

        * getElementById('<name id>'):
            access object element by id
            find once element

        * getElementsByTagName('<name tag>'):
            access objec element by name tag
            output: shebhe array
                HTML Collection
                har index yek object hast

        * getElementsByClassName('<name class>'):
            access objec element by name class
            output: shebhe array
                HTML Collection
                har index yek object hast

        * querySelector('<name selector css>'):
            access objec by selector
            find once element

        * querySelectorAll('<name selector css>'):
            access objec by selector
            output: shebhe array
            Node list
            find once element

        *****************
        change Attribute:
            in DOM:

                * document.<set element>.<attribute> = '<new value>';
                Note: attribute class => className
                for add vaule in attribute use +='new value'
        *****************

        * getAttirbute('<name attribute html>')
            access value attribute
            output: string

        * setAttribute('<name attribute html>',value attribute)
            age attribute vojod dashte bashe
                change value
            age attribute vojod nadashte bashe
                create attribute

        * removeAttribute('<name attribute html>')
            remove attribute in tag html 

        *****************
        change style:
            in DOM:

                * document.<set element>.style.<property> = '<new value>';
                Note: property haye ke bish az yek kalame
                      hastan camleCase mishan

                    Note:
                        in noee style dehi besorat inline
                        miyad va asar mikone
        *****************

        * getComputeStyle(<selectedElement>.property)

        property:

            nodeName:
                name element
                output:
                    string

            nodeType:
                number type element
                output:
                    number

            parnetNode:
                name parent element
                output:
                    object

            first/lastChild:
                name frist/lastChild element
                output:
                    object
                Note: comment to child element

            innerHTML:
                inner total content element
                output:
                    string
                *****************************


--------------








**********************************************
**********************************************
**********************************************
**********************************************
Ali Sheykh
**********************************************
**********************************************
**********************************************
**********************************************

############
GENERAL
############

------------
use javascript in html :
    1- use in project inline
    2- import file.js in project by src
        src ==> directory

------------
comment in js:
    1- one line : //comment
    2- mutiple line :
        /*
            comment
        */



------------
RUN js file : 

    1-console:
        use js file wroking in browser
        {best : test DEbog}
        Note:
            attribute:
                1- .log()       => show data(string/number/array/variable/object/boolean)
                2- .table()     => show data new views
                3- .error()     => show error
                4- .clear()     => clear console
                5- .wran()      => show text warning
                6- .time()      => start timer for calc time run code
                7- .timeEnd()   => end timer for calc time run code
                    Note:
                        console.time(<name timer>)
                            //code
                        console.timeEnd(<name timer>)

------------
variable js:
    1- var:
        * initial var and assign value
            value => input
        * initial var
            value => undefined

        start letters,number,_,$
            * cannot start with number
            * the best not start by $ : JQoury


    2- let:
        * initial var and assign value
            value => input
        * initial var
            value => undefined

    3- const:
        * cannot only initial
        * cannot change assign in string and number and boolean
        * change value in key in object

############
DATA TYPE
############

------------
data type :
    1- Primitive Type:
        String
        Number
        Boolean
        Null => return object | cannot define const
        Undefined
        Symbol
    
    2- Refernce Type:
        Array []    => return object
        Object {}   => return object

------------
convert type:
    1- convert to string:
        method :    String(<variable>)
                    <variable>.toString()

            * number => string
            * boolean => string
            * Date => string
            * array => string
            * object => string
        
        Note: dakhele parantez tamame amaliyathaye
        reyazi anjam mishe bad change mihse be string

    2- convert to number:
        method :    Number(<variable>)
                    parseInt(<variable>)[Note:convert integer]
                    parseFloat(<variable>)
                    <variable>.toFixed(aashar)

        * string number => number
        * boolean => number | true=>1,false=>0
        * null => number | null=>0
        * string char => number | 'char'=>NaN(undefined number)
        * array => number |[1,2,3,..] => NaN

------------
number data type:

    + sum numbers : jam addad
    - sub numbers : tafrigh addad
    * mul numbers : zarb addad
    / div numbers : taghsim addad
    % mod numbers : baghimande addad

*********************
Math Modules:
    property:
        Math.PI : added p
        Math.E : added neper
    
    method:
        * round(<number>)         : round down
        * ceil(<number>)          : round up
        * floor(<number>)         : round abslot down
        * sqrt(<number>)          : jazeer
        * abs(<number>)           : tabdil be added mosbat
        * pow(<number>,<number>)  : tavan | number dovom be tavan hast
        * min(<list of number>)   : show min addad | separator ','
        * max(<list of number>)   : show max addad | separator ','
        * random()                : addad beyn 0>=x>1
            Note: baray har baze bayad zarb dar on addad beshe
*********************
------------
string data type:

    nemad : ' ' , " "

    + sum string : concat strings
        Note: ezafe kardan space ' ' be in sorat hast

        'str1'+'str2'
        val='str1'
        val+='str2'
    
    use variable in string
        ` => back tik
        `string ${variable} string`

    move in string:
        <string>[i] : i is index in string
        Ex : Ali ['A','l','i']

    property:
        <string>.length : tole reshte

    method :
        <string>.cancat(<separator>,<new string>)
        <string>.toUpperCase()
        <string>.toLowerCase()
        <string>.indexOf('char') : show index in string
        <string>.charAt('<number index>') : show char in index
        <string>.substring(<startIndex>,<endIndex+1>) endIndex+1=> tedad entekhabi
        <string>.slice(<startIndex>,<endIndex+1>) | out of range show self string
        <string>.split(<separator>) | out put array 
        <string>.replace(<oldString>,<newString>)
        <string>.includes(<string>) : shamel bodan dar string

------------
array data type:

    nemad : []

    Note: any data type use in array
          string | number | object | array | Symbol

    move in array:
        <array>[i] : i is index in array
        Ex : [1,2,3,4,5] , i=0 => 1

    insert to array:
        <array>[i]=newValue

    property:
        <array>.length : show length array | output number

    method:
        <array>.isArray(<nameArray>) | output boolean
        <array>.indexOf(data) : show index number data in array
        <array>.push(data) : add data to end index array
        <array>.unshift(data) : add data to start index array
        <array>.pop() : remove data in end index array
        <array>.shift() : remove data in start index array
        <array>.splice(<startIndex>,<endIndex>) : remove az index start ta index end in array
        <array>.reverse()
        <array>.concat(<newArray>)
        <array>.sort() : sort by alphabetf | for number 1.convert to string 2.sort index be index


------------
object data type:

    nemad : {}

    key:value
    key   -> name
    value -> string,number,array,object,function

    access to value :
        <nameObject>.<nameKey>
        <nameObject>['nameKey']
        if value functions:
            <nameObject>.<nameFunction>()
            Note: baray estefade az key ha dar yek
                  step payentar bayad ghabl az on name
                  key az keyword "this" estefade konim

############
IF
############
--------------
if:
    if(something){
        //code;
    }else{
        //other code;
    }

        Note : 
            = mean assign
            == mean compare equal value
            === maen compare equal type and value
            != mean compare not equal value
            !== mean compare not equal type and value
            > , >= or < , <=
            && mean AND : total true => true
            || mean OR : once of total true => true
            //////////////////////////////////////////
            number dar shart value true hast 
            compare undefined : typeof <variable> !== 'undefined'

--------------
elseif:

    if(something){
        //code;
    }elseif(something){
        //other code;
    }...{
        // other elseif code
    }else{
        //other code;
    }

--------------
shortcute if :

    something ? <return true code> : <return false code>


############
SWITCH
############
structure switch:
    switch(key){
        case value1:
            //code;
            break;
        case value2:
            //code;
            break;
        case value3:
            //code;
            break;
        default:
            //code;
            break;
    }

############
FUNCTION
############
------------
function Declarations:
    function <nameFunction>(<input>){
        //code;
        return output
    }

    farakhani => <nameFunction>(<arguments>)
        dar farakhani age az ghabl maghadir pish farz
        dade nashode bashe return NaN mishe vale age
        maghadir pish farz dade shode bashe ba tavajo
        be maghadir pish farz yek hasele baraye ma miyare

------------
function Expresions:
    
    var/const/let <nameFunction> = function(<input>){
        //code
        return output
    }

    farakhani => <nameFunction>(<arguments>)
        dar farakhani age az ghabl maghadir pish farz
        dade nashode bashe return NaN mishe vale age
        maghadir pish farz dade shode bashe ba tavajo
        be maghadir pish farz yek hasele baraye ma miyare

    Note: farghe function Declarations ba Expresions
          dar in hast ke dar halat Declarations mofaser
          javascript be mahze
          ejar tamame function ro mikhone aval bad mire
          soraghe run kardan code ha vali dar halat Expresions
          chon ma be yek variable function ro pass dadim pas
          mofaser on ro ghabl az ejar code ha nemikhone

------------
arrow function:
    1. var/const/let <nameFunction> = (<parameter>) => {
        //code
        return output
        }

    2. var/const/let <nameFunction> = <one input> => output

    Note: use to input hatam bayad az () estefade kard
          va age ham hich input nadashte bashim bayad hatman
          () ro bezarim
------------
immidiatley invokable function expressions - IIFEs

(function(){
    //code;
})();

(function(<parameter>){//code;})(<arguments>)

############
LOOP
############
------------
for:
    default:
        for(let <variable> =0; <variable> < <domain>;<variable>++){
            //code
        }

        Note: move in array in default for

    for in:
        for(<index | key> in <nameArray>){
            //code
        }

    forEach:
        <nameArray>.forEach(function(<parameter>){
            //code
        })

        Note: parameter mean number index in array
        <nameArray>.forEach(<indexArray> => {
            //code
        })

    map:
        <nameArray>.map(<indexArray> => {
            //code
        })



------------
while:
    1.
    let <variable> = <number>;
    while(<variable> < <domain>){
        //code
        <variable>++;
    }

    2.
    do{
        //code
        <variable>++;
    }while(<variable> < <domain>)

    Note: tafavot dar in hast ke age do while yek bar
          anjam mishe


############
SCOPE
############
------------
function scop:
    dar block function ha maghadir var,const,let
    makhsos function hast va ba maghadir variable ha
    biron kamel fargh mikone

------------
if scope:
    dar if tanha maghadir var change mishe va in maghadir
    dar biron az if taghirat baghi mimone

var:


let:


const:

############
Map()
############
------------
defined:
    <nameVariable> = new Map()

------------
assign:
    <nameVariable>.set(<nameKey>,<every value>)
    value:
        string| number | array | object | function

------------
access:
    <nameVariable>.get(<nameKey>)
    <nameVariable>.get('<nameKey>').<KeyInObject>

------------
size:
    <nameVariable>.size : show index in map

------------
has:
    <nameVariable>.has(<nameKey>) : find key in map | output boolean

------------
delete:
    <nameVariable>.delete(<nameKey>)

------------
clear:
    <nameVariable>.clear()
    Note: clear total map

############
Set()
############
------------
defined:
    <nameVariable> = new Set()

Note : set similar array : tafavot dar in hast ke maghadir bayad yonik
       bashe dar Set()

------------
add:
    <nameSet>.add(data)
    mishe maghadir tekrari dad vali yeki ro bishtar emal nemikone

    Note : add mostaghim
           Ex : const <nameVariable> = new Set([1,2,3,4])
------------
size:
    <nameVariable>.size : show index in set

------------
has:
    <nameVariable>.has(<nameKey>) : find key in set | output boolean
    Note : data reference => object and array has find false

------------
delete:
    <nameVariable>.delete(<nameKey>)

------------
clear:
    <nameVariable>.clear()
    Note: clear total map

############
Destructuring Assignment
############
------------
initial variables:

    [var1,var2]=[value1,value2]
    tedad variable ha ba value ha barabar hast

    {a,b}={a:value1,b:value2}

------------
rest pattern:

    [var1,var2,...var3]=[1,2,3,4,5,6]
    var 1=1
    var 2=2
    var 3=[4,5,6]
    ... var3 : hatman dar akhar bashe

    [var1,var2,...var3]=[1,2,3,4,5,6]
    var 1=1
    var 2=2
    var 3=[4,5,6]
    ... var3 : hatman dar akhar bashe

------------
array pattern:

    const <nameArray> = [value1,value2,value3]
    const [var1,var2,var3]=<nameArray>
        var1=value1
        var2=value2
        var3=value3

------------
object pattern:

    const perosn={
        name:'ali',
        age:27,
        function1:functin(){
            //code
        }
    }

    const {Name , Age , Function}=person
        Name = person.name
        Age = person.age
        Function = function1

    Note : for call Function : Function() => call function1()











####################################################
####################################################
####################################################
####################################################
Date() :
    new Data() => show new date in file